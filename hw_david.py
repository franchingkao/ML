# -*- coding: utf-8 -*-
"""hw_David.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SBnKxIT0uUr3prHdMKiETiLozwHJmUCF
"""

import numpy as np
import math
import pandas as pd
from sklearn import linear_model

def gradient_descent(x,y):
  m_curr = b_curr = 0
  iterations = 1000000
  n = len(x)
  learning_rate = 0.0002
  previous_cost = 0

  for i in range(iterations):
    y_predicted = m_curr * x + b_curr
    md = -(2/n)*sum(x*(y-y_predicted))
    bd = -(2/n)*sum(y-y_predicted)
    m_curr = m_curr - learning_rate * md
    b_curr = b_curr - learning_rate * bd
    cost = (1/n)*sum([val**2 for val in (y-y_predicted)])
    cost_close = math.isclose(cost, previous_cost, rel_tol=1e-20)
    if (cost_close):
      break

    previous_cost = cost

    #print(f"m {m_curr}, b {b_curr}, cost {cost}, previous_cost {previous_cost}, iteration {i}")
    
    return m_curr, b_curr

def linear_regression():
  df = pd.read_csv('test_scores.csv')
  reg = linear_model.LinearRegression()
  reg.fit(df[['math']],df.cs)

  return reg.coef_, reg.intercept_

if __name__ == "__main__":
  df = pd.read_csv('test_scores.csv')
  x = df.math
  y = df.cs

  m1, b1 = gradient_descent(x,y)
  print(f"gradient descent: coef = {m1}, intercept = {b1}")


  m2, b2 = linear_regression()
  print(f"linear regression: coef = {m2}, intercept = {b2}")